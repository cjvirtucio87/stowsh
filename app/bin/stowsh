#!/bin/bash

set -e

### stowsh
### [summary]
### Command for managing your dotfiles.
###
### [description]
### This is a command-line tool for managing dotfiles.
###
### Available subcommands:
### - install (install your dotfiles)
### - git (pass-thru to git on your cloned dotfiles)
### - update (copy your dotfiles back to your cloned dotfiles location)
###
### [usage]
### - Execute with a log level of DEBUG:
### LOG_LEVEL=debug stowsh

readonly CONFIG_PATH="${HOME}/.stowsh"
readonly PROJECT_DIR="$(dirname "$0")/.."
DOTFILES_URL="${DOTFILES_URL:-git@github.com:your_usr_name/dotfiles.git}"
DOTFILES_PLATFORM="${DOTFILES_PLATFORM:-ubuntu}"
LOG_LEVEL="${LOG_LEVEL:-INFO}"
DOTFILES_DEPLOY_DIR="${DOTFILES_DEPLOY_DIR:-"/mnt/c/Users/$(whoami)"}"

# shellcheck disable=SC1090
. "${PROJECT_DIR}/lib/shell-lib/.logging"
# shellcheck disable=SC1090
. "${PROJECT_DIR}/lib/stowsh/.stowsh-git"
# shellcheck disable=SC1090
. "${PROJECT_DIR}/lib/stowsh/.stowsh-install"
# shellcheck disable=SC1090
. "${PROJECT_DIR}/lib/stowsh/.stowsh-update"

main() {
  log_debug "validating required variables"

  if [ ! -d "${HOME}" ]; then
    log-error "HOME, ${HOME}, does not exist"
    exit 1
  fi

  if [ ! -d "${DOTFILES_DEPLOY_DIR}" ]; then
    log_error "DOTFILES_DEPLOY_DIR, ${DOTFILES_DEPLOY_DIR}, does not exist"
    exit 1
  fi

  local subcommand=$1
  shift

  case "${subcommand}" in
    'git')
      call_git "$@"
      ;;
    'install')
      install "$@"
      ;;
    'update')
      update "$@"
      ;;
    *)
      log_error "invalid subcommand, ${subcommand}"
      exit 1
      ;;
  esac
}

main "$@"
